---
import Button from './ui/Button.astro';

const currentPath = Astro.url.pathname;

const navItems = [
  { href: '/', label: 'Home' }
];
---

<header class="fixed top-0 left-0 right-0 z-50 transition-all duration-300" id="main-header">
  <!-- Modern Navigation Bar -->
  <nav class="backdrop-blur-xl bg-dark-100/80 border-b border-white/10 shadow-lg">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        
        <!-- Logo and Brand -->
        <div class="flex items-center space-x-3">
          <a href="/" class="flex items-center space-x-3 group">
            <!-- Logo with Glow Effect -->
            <div class="relative">
              <img 
                src="/icon/cropped-Jenny-Mod-150x150.webp" 
                alt="Jenny Mod" 
                class="w-10 h-10 rounded-xl shadow-lg group-hover:shadow-glow-primary transition-all duration-300 group-hover:scale-110"
              />
              <div class="absolute inset-0 rounded-xl bg-gradient-to-br from-primary/20 to-secondary/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm -z-10"></div>
            </div>
            
            <!-- Brand Text -->
            <div class="hidden sm:block">
              <h1 class="text-xl font-heading font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent group-hover:from-primary-400 group-hover:to-secondary-400 transition-all duration-300">
                Jenny Mod
              </h1>
              <p class="text-xs text-base-content/60 -mt-1">Official Website</p>
            </div>
          </a>
        </div>
        
        <!-- Desktop Navigation -->
        <div class="hidden md:flex items-center space-x-1">
          {navItems.map((item) => (
            <a
              href={item.href}
              class={`
                relative px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300
                ${currentPath === item.href 
                  ? 'text-primary bg-primary/10' 
                  : 'text-base-content/80 hover:text-primary hover:bg-white/5'
                }
                group
              `}
            >
              {item.label}
              
              <!-- Active Indicator -->
              {currentPath === item.href && (
                <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-primary rounded-full"></div>
              )}
              
              <!-- Hover Effect -->
              <div class="absolute inset-0 rounded-lg bg-gradient-to-r from-primary/10 to-secondary/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 -z-10"></div>
            </a>
          ))}
        </div>
        
        <!-- Action Buttons -->
        <div class="flex items-center space-x-3">
          <!-- Download Button -->
          <Button
            href="/#dn"
            variant="primary"
            size="sm"
            class="hidden sm:inline-flex shadow-glow-primary"
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
            Download
          </Button>
          
          <!-- Mobile Menu Button -->
          <button
            class="md:hidden p-2 rounded-lg text-base-content/80 hover:text-primary hover:bg-white/5 transition-all duration-300"
            id="mobile-menu-button"
            aria-label="Toggle mobile menu"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="menu-icon">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
            <svg class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="close-icon">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    <!-- Mobile Navigation Menu -->
    <div class="md:hidden hidden" id="mobile-menu">
      <div class="px-4 pt-2 pb-4 space-y-2 bg-dark-200/95 backdrop-blur-xl border-t border-white/10">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`
              block px-4 py-3 rounded-lg text-base font-medium transition-all duration-300
              ${currentPath === item.href 
                ? 'text-primary bg-primary/10 border-l-4 border-primary' 
                : 'text-base-content/80 hover:text-primary hover:bg-white/5'
              }
            `}
          >
            {item.label}
          </a>
        ))}
        
        <!-- Mobile Download Button -->
        <div class="pt-4 border-t border-white/10">
          <Button
            href="/#dn"
            variant="primary"
            size="md"
            class="w-full"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
            Download Jenny Mod
          </Button>
        </div>
      </div>
    </div>
  </nav>
  
  <!-- Progress Bar -->
  <div class="h-1 bg-gradient-to-r from-primary via-secondary to-accent transform scale-x-0 origin-left transition-transform duration-300" id="scroll-progress"></div>
</header>

<!-- Spacer to prevent content from hiding behind fixed header -->
<div class="h-16"></div>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');
  
  mobileMenuButton?.addEventListener('click', () => {
    const isOpen = !mobileMenu?.classList.contains('hidden');
    
    if (isOpen) {
      mobileMenu?.classList.add('hidden');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
    } else {
      mobileMenu?.classList.remove('hidden');
      menuIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
    }
  });
  
  // Header scroll effects
  const header = document.getElementById('main-header');
  const scrollProgress = document.getElementById('scroll-progress');
  
  let lastScrollY = 0;
  
  window.addEventListener('scroll', () => {
    const currentScrollY = window.scrollY;
    const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercentage = (currentScrollY / documentHeight) * 100;
    
    // Update progress bar
    if (scrollProgress) {
      scrollProgress.style.transform = `scaleX(${scrollPercentage / 100})`;
    }
    
    // Header background opacity based on scroll
    if (header) {
      const opacity = Math.min(currentScrollY / 100, 1);
      header.style.background = `rgba(24, 24, 27, ${0.8 + (opacity * 0.2)})`;
    }
    
    // Hide/show header on scroll
    if (currentScrollY > lastScrollY && currentScrollY > 100) {
      // Scrolling down
      header?.classList.add('-translate-y-full');
    } else {
      // Scrolling up
      header?.classList.remove('-translate-y-full');
    }
    
    lastScrollY = currentScrollY;
  });
  
  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!mobileMenuButton?.contains(e.target as Node) && !mobileMenu?.contains(e.target as Node)) {
      mobileMenu?.classList.add('hidden');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
    }
  });
</script>